/**
 * 针对于控制反转的说明
 * @author FrancisGaozhu
 * @date 2018/9/11 13:31
 * @mail francisgaozhu@foxmail.com
 *
 */

控制反转
========================================================================================================================
Inversion of control，控制反转不是什么技术，也不是什么组建。而是与“面向对象”一样是一种设计思想。Ioc意味着将你设计好的对象交给容器控
制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了）
哪些方面反转了”，那我们来深入分析一下：

●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创
 建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比
 如文件等）。

●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来
 帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对
 象的获取被反转了。用图例说明一下，传统程序设计都是主动去创建相关对象然后再组合起来。
========================================================================================================================